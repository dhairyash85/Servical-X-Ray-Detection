import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pydicom
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

train_metadata = pd.read_csv('path/to/train/metadata.csv')
test_metadata = pd.read_csv('path/to/test/metadata.csv')

def load_dicom_images(file_paths):
    images = []
    for file_path in file_paths:
        dcm = pydicom.dcmread(file_path)
        image = dcm.pixel_array
        images.append(image)
    return np.array(images)

train_image_paths = ['path/to/train/images/' + filename for filename in train_metadata['file_name']]
test_image_paths = ['path/to/test/images/' + filename for filename in test_metadata['file_name']]

train_images = load_dicom_images(train_image_paths)
test_images = load_dicom_images(test_image_paths)

train_images = train_images / 255.0
test_images = test_images / 255.0

label_encoder = LabelEncoder()
train_labels = label_encoder.fit_transform(train_metadata['fracture_bone'])
test_labels = label_encoder.transform(test_metadata['fracture_bone'])

X_train, X_val, y_train, y_val = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(None, None, 1)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
    X_train,
    y_train,
    validation_data=(X_val, y_val)
)

y_pred = model.predict_classes(test_images)
test_acc = accuracy_score(test_labels, y_pred)
print('Test accuracy:', test_acc)

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()
