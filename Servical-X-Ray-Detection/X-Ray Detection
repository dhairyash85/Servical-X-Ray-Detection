import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.calibration import LabelEncoder
import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import nibabel as nib


train_metadata = pd.read_csv('path/to/train/metadata.csv')
test_metadata = pd.read_csv('path/to/test/metadata.csv')

def load_nifti_images(file_paths):
    images = []
    for file_path in file_paths:
        nifti = nib.load(file_path)
        image = nifti.get_fdata()
        images.append(image)
    return np.array(images)

train_mask_paths = ['path/to/train/masks/' + filename for filename in train_metadata['mask_filename']]
test_mask_paths = ['path/to/test/masks/' + filename for filename in test_metadata['mask_filename']]

train_masks = load_nifti_images(train_mask_paths)
test_masks = load_nifti_images(test_mask_paths)

train_metadata = pd.read_csv('path/to/train/metadata.csv')
test_metadata = pd.read_csv('path/to/test/metadata.csv')

train_masks = train_masks / np.max(train_masks)
test_masks = test_masks / np.max(test_masks)

label_encoder = LabelEncoder()
train_labels = label_encoder.fit_transform(train_metadata['fracture_bone'])
test_labels = label_encoder.transform(test_metadata['fracture_bone'])

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(None, None, 1)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_masks,
    train_labels,
    epochs=10,  # adjust as needed
    validation_data=(test_masks, test_labels)
)

test_loss, test_acc = model.evaluate(test_masks, test_labels, verbose=2)
print('Test accuracy:', test_acc)

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()
